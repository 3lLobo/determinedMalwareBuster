from src.boring_classifier import Net
from determined.pytorch import DataLoader, PyTorchTrial, PyTorchTrialContext
import torch

# TODO: define data loading.
# TUTORIAL: https://docs.determined.ai/latest/tutorials/pytorch-mnist-tutorial.html


class DeterminedNet(Net, PyTorchTrial):
    def __init__(self, context: PyTorchTrialContext):
        # Store trial context for later use.
        self.context = context

        # Create a unique download directory for each rank so they don't overwrite each
        # other when doing distributed training.
        self.download_directory = f"/tmp/data-rank{self.context.distributed.get_rank()}"
        self.data_downloaded = False

        # Initialize the model.
        super().__init__(
            n_dim=N_COLUMNS,
            n_classes=N_CLASSES,
            dropout_1=context.get_hparam("dropout_1"),
            dropout_2=context.get_hparam("dropout_2"),
        )

        self.optimizer = self.context.wrap_optimizer(
            torch.optim.Adam(
                self.model.parameters(),
                lr=context.get_hparam("learning_rate"),
            )
        )

    def build_training_data_loader(self):
        if not self.data_downloaded:
            self.download_directory = data.download_dataset(
                download_directory=self.download_directory,
                data_config=self.context.get_data_config(),
            )
            self.data_downloaded = True

        train_data = data.get_dataset(self.download_directory, train=True)
        return DataLoader(train_data, batch_size=self.context.get_per_slot_batch_size())

    def build_validation_data_loader(self):
        if not self.data_downloaded:
            self.download_directory = data.download_dataset(
                download_directory=self.download_directory,
                data_config=self.context.get_data_config(),
            )
            self.data_downloaded = True

        validation_data = data.get_dataset(self.download_directory, train=False)
        return DataLoader(
            validation_data, batch_size=self.context.get_per_slot_batch_size()
        )
