from __future__ import print_function

import torch
import torch.nn.functional as F
import torch.optim as optim
from torch.optim.lr_scheduler import StepLR
from torchvision import datasets, transforms
import pandas as pd
from src.data import MalwareDataset
from src.mlp import Mlp
from sklearn.model_selection import train_test_split

# NEW: Import Determined.
import determined as det

from model_def import DeterminedNet
from util.arg_parser import get_args

target = "malware_type_family"


def train(args, model, device, train_loader, optimizer, epoch_idx, core_context):
    model.train()
    for batch_idx, (data, target) in enumerate(train_loader):
        data, target = data.to(device), target.to(device)
        optimizer.zero_grad()
        output = model(data)
        loss = F.nll_loss(output, target)
        loss.backward()
        optimizer.step()

        if (batch_idx + 1) % args.log_interval == 0:
            print(
                "Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}".format(
                    epoch_idx,
                    batch_idx * len(data),
                    len(train_loader.dataset),
                    100.0 * batch_idx / len(train_loader),
                    loss.item(),
                )
            )
            # Index by (batch_idx + 1) * (epoch-1) * len(train_loader) to continuously plot loss on one graph for consecutive epochs.
            core_context.train.report_training_metrics(
                steps_completed=(batch_idx + 1) + epoch_idx * len(train_loader),
                metrics={"train_loss": loss.item(), "epoch": epoch_idx},
            )

            if args.dry_run:
                break


# NEW: Modify function header to include args, epoch, test_loader, core_context for metric reporting and a steps_completed parameter to plot metrics.
def test(args, model, device, test_loader, epoch, core_context, steps_completed):
    model.eval()
    test_loss = 0
    correct = 0
    with torch.no_grad():
        for data, target in test_loader:
            data, target = data.to(device), target.to(device)
            output = model(data)
            test_loss += F.nll_loss(
                output, target, reduction="sum"
            ).item()  # sum up batch loss
            pred = output.argmax(
                dim=1, keepdim=True
            )  # get the index of the max log-probability
            correct += pred.eq(target.view_as(pred)).sum().item()

    test_loss /= len(test_loader.dataset)

    print(
        "\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\n".format(
            test_loss,
            correct,
            len(test_loader.dataset),
            100.0 * correct / len(test_loader.dataset),
        )
    )

    core_context.train.report_validation_metrics(
        steps_completed=steps_completed,
        metrics={"test_loss": test_loss, "epoch": epoch},
    )


def main(core_context):
    # Training settings
    args = get_args()
    device = args["device"]

    train_kwargs = {"batch_size": args.batch_size}
    test_kwargs = {"batch_size": args.test_batch_size}
    if args["use_cuda"]:
        cuda_kwargs = {"num_workers": 1, "pin_memory": True, "shuffle": True}
        train_kwargs.update(cuda_kwargs)
        test_kwargs.update(cuda_kwargs)

    transform = transforms.Compose(
        [transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]
    )

    df = pd.read_csv("data/datasetMalMem22.csv")
    df_train, df_test = train_test_split(df, test_size=0.2, random_state=11)
    dataset_train = MalwareDataset(df_train, target, normalize=True)
    dataset_test = MalwareDataset(df_test, target, normalize=True)
    train_loader = dataset_train.get_dataloader(args.batch_size)
    test_loader = dataset_test.get_dataloader(args.test_batch_size)

    n_dims, n_classes = dataset_train.get_dimensions()
    model = Mlp(n_dims, n_classes, dropout=args.dropout)

    model = model.to(device)
    optimizer = optim.Adadelta(model.parameters(), lr=args.lr)
    scheduler = StepLR(optimizer, step_size=1, gamma=args.gamma)
    for epoch_idx in range(0, args.epochs):
        steps_completed = epoch_idx * len(train_loader)
        train(args, model, device, train_loader, optimizer, epoch_idx, core_context)
        test(
            args,
            model,
            device,
            test_loader,
            epoch_idx,
            core_context,
            steps_completed=steps_completed,
        )
        scheduler.step()


if __name__ == "__main__":
    # NEW: Establish new determined.core.Context and pass to main function.
    with det.core.init() as core_context:
        main(core_context=core_context)
