import torch
import torch.nn as nn
import torch.nn.functional as F


class Net(nn.Module):
    def __init__(
        self,
        n_dim: int,
        n_classes: int,
        dropout_1: float = 0.25,
        dropout_2: float = 0.5,
    ):
        """Initialize the model.

        Args:
            n_dim (int): Number of dimensions of the input data.
            n_classes (int): Number of classes in the dataset.
            dropout_1 (float, optional): Dropout rate for the first dropout layer. Defaults to 0.25.
            dropout_2 (float, optional): Dropout rate for the second dropout layer. Defaults to 0.5.
        """
        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(1, n_dim, 3, 1)
        self.conv2 = nn.Conv2d(n_dim, n_dim * 2, 3, 1)
        self.dropout1 = nn.Dropout(dropout_1)
        self.dropout2 = nn.Dropout(dropout_2)
        self.fc1 = nn.Linear(9216, 128)
        self.fc2 = nn.Linear(128, n_classes)

    def forward(self, x):
        x = self.conv1(x)
        x = F.relu(x)
        x = self.conv2(x)
        x = F.relu(x)
        x = F.max_pool2d(x, 2)
        x = self.dropout1(x)
        x = torch.flatten(x, 1)
        x = self.fc1(x)
        x = F.relu(x)
        x = self.dropout2(x)
        x = self.fc2(x)
        output = F.log_softmax(x, dim=1)
        return output
