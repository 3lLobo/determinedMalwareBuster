from model_def import DeterminedNet
import yaml
from addict import Dict
from pprint import pprint


def get_rank():
    return 1


def get_per_slot_batch_size():
    return 64


def wrap_nothing(x):
    return x


class MyContext(Dict):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.distributed = Dict(
            {
                "get_rank": get_rank,
            }
        )
        self.update(
            {
                "get_per_slot_batch_size": get_per_slot_batch_size,
                "wrap_model": wrap_nothing,
                "wrap_optimizer": wrap_nothing,
                "wrap_loss": wrap_nothing,
                "wrap_metric": wrap_nothing,
            }
        )

    def get_hparam(self, key):
        return self.hyperparameters[key]


context = yaml.load(open("experiments/const.yml", "r"))

# dis = {"distributed": {"get_rank": get_rank}}
# context.update(dis)
context = MyContext(context)
pprint(context)

model = DeterminedNet(context)

train_data = model.build_training_data_loader()
val_data = model.build_validation_data_loader()

for epoch in range(context.searcher.max_length.epochs):
    for i_batch, batch in enumerate(train_data):
        batch_results = model.train_batch(batch, epoch, i_batch)
        # for k, v in batch_results.items():
        #     print(k, v)

    for batch in val_data:
        batch_results = model.evaluate_batch(batch)
        # for k, v in batch_results.items():
        #     print(k, v)
